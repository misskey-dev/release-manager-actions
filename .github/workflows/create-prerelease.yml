name: "Release Manager/Create Pre-release"

on:
  workflow_call:
    inputs:
      pr_number:
        type: string
        description: 'PR number'
        required: true
      user:
        type: string
        description: 'User name'
        default: 'github-actions[bot]'
      package_jsons_to_rewrite:
        type: string
        description: 'package.jsons to rewrite (json)'
        default: 'package.json'
      use_external_app_to_release:
        type: boolean
        default: false
      indent:
        type: string
        description: '`tab` or number of spaces'
        default: tab
    secrets:
      RELEASE_APP_ID:
        description: 'App ID for app to create release'
      RELEASE_APP_PRIVATE_KEY:
        description: 'Private key for app to create release'

permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  create-prerelease:
    name: "Create Pre-release"
    runs-on: ubuntu-latest
    if: ${{ inputs.pr_number != '' }}
    # 開いているリリースのパッチバージョンを上げる
    steps:
      - uses: actions/checkout@v4
      - name: Initialize
        uses: misskey-dev/release-manager-actions/.github/actions/checkout-pr@v1
        with:
          pr_number: ${{ inputs.pr_number }}
          user: ${{ inputs.user }}
        id: get_pr
      - name: Get target version
        uses: misskey-dev/release-manager-actions/.github/actions/get-target-version@v1
        id: v
      # バージョンをインクリメント
      - name: Increment version
        uses: actions/script@v7
        env:
          CURRENT_VERSION: ${{ steps.v.outputs.current_version }}
          pr_is_draft: ${{ steps.get_pr.outputs.pr_is_draft }}
        with:
          script: |
            const [major, minor, _patch, _pre] = process.env.CURRENT_VERSION.split('.');
            const pre = Number(_pre);
            if (Number.isNaN(pre)) {
              console.error('Invalid pre version', process.env.CURRENT_VERSION, major, minor, _patch);
              throw new Error('Invalid pre version');
            }

            if (process.env.pr_is_draft == 'true') {
              if (_patch.endsWith('beta')) {
                return `${major}.${minor}.${_patch}.${pre + 1}`;
              }
              return `${major}.${minor}.${_patch.split('-')[0]}-beta.${pre + 1}`;
            }
            if (_patch.endsWith('rc')) {
              return `${major}.${minor}.${_patch}.${pre + 1}`;
            }
            return `${major}.${minor}.${_patch.split('-')[0]}-rc.${pre + 1}`;

          result-encoding: string
        id: release_version
      # バージョンをpackage.jsonに書き込み
      - name: Write version
        uses: misskey-dev/release-manager-actions/.github/actions/rewrite-package-json@v1
        with:
          version: ${{ steps.release_version.outputs.result }}
          package_jsons: ${{ inputs.package_jsons_to_rewrite }}
          indent: ${{ inputs.indent }}
      # release/ブランチにpush、タグを作成
      - name: Commit version
        run: |
          git commit -am "Bump version to $VERSION_NAME"
          git push origin "HEAD:release/$TARGET_VERSION"
          git tag "$VERSION_NAME"
          git push origin "$VERSION_NAME"
        env:
          VERSION_NAME: ${{ steps.release_version.outputs.result }}
          TARGET_VERSION: ${{ steps.v.outputs.target_version }}
      # CHANGELOG.mdの内容を取得
      - name: Get changelog
        uses: misskey-dev/release-manager-actions/.github/actions/get-changelog@v1
        with:
          version: ${{ steps.v.outputs.target_version }}
        id: changelog
      # リリースを作成
      - uses: actions/create-github-app-token@v1
        id: release-app-token
        if: inputs.use_external_app_to_release
        with:
          app-id: ${{ secrets.RELEASE_APP_ID }}
          private-key: ${{ secrets.RELEASE_APP_PRIVATE_KEY }}
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ inputs.use_external_app_to_release && steps.release-app-token.outputs.token || secrets.GITHUB_TOKEN }}
          VERSION_NAME: ${{ steps.release_version.outputs.result }}
          CHANGELOG: ${{ steps.changelog.outputs.changelog }}
        run: |
          gh release create "$VERSION_NAME" --prerelease --title "$VERSION_NAME" --notes "$CHANGELOG"
      # PRのnotesを更新
      # (通常release-edit-with-pushで更新されているためここで更新されることはない)
      #- name: Update PR
      #  run: |
      #    gh pr edit ${{ inputs.pr_number }} --body "${{ steps.changelog.outputs.changelog }}"
