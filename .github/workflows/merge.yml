name: "Release Manager/Go Merge"

on:
  workflow_call:
    inputs:
      pr_number:
        type: string
        description: PR number
        required: true
      user:
        type: string
        description: User name
        default: github-actions[bot]
      package_jsons_to_rewrite:
        type: string
        description: 'package.jsons to rewrite (json)'
        default: 'package.json'
      changes_template:
        type: string
        description: 'Template for CHANGELOG.md'
        default: |
          ## Unreleased
          -
      use_external_app_to_release:
        type: boolean
        default: false
      indent:
        type: string
        description: '`tab` or number of spaces'
        default: tab
    secrets:
      RELEASE_APP_ID:
        description: 'App ID for app to create release'
      RELEASE_APP_PRIVATE_KEY:
        description: 'Private key for app to create release'
      RULESET_EDIT_APP_ID:
        description: 'App ID for app to edit rulesets'
      RULESET_EDIT_APP_PRIVATE_KEY:
        description: 'Private key for app to edit rulesets'

permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  merge:
    name: "Go Merge"
    runs-on: ubuntu-latest
    if: ${{ inputs.pr_number != '' }}
    steps:
      - uses: actions/checkout@v4
      - name: Initialize
        uses: misskey-dev/release-manager-actions/.github/actions/checkout-pr@v1
        with:
          pr_number: ${{ inputs.pr_number }}
          user: ${{ inputs.user }}
      - name: Get target version
        uses: misskey-dev/release-manager-actions/.github/actions/get-target-version@v1
        id: v

      # rulesetを切り替え
      - uses: actions/create-github-app-token@v1
        id: app-token
        if: vars.RULESET_ID_WITHIN_RELEASE || vars.RULESET_ID_OUT_OF_RELEASE
        with:
          app-id: ${{ secrets.RULESET_EDIT_APP_ID }}
          private-key: ${{ secrets.RULESET_EDIT_APP_PRIVATE_KEY }}
      - name: Enable the ruleset
        uses: octokit/request-action@v2.x
        if: steps.app-token.outputs.token && vars.RULESET_ID_OUT_OF_RELEASE
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        with:
          route: PUT /repos/{repository}/rulesets/{ruleset_id}
          repository: ${{ github.repository }}
          ruleset_id: ${{ vars.RULESET_ID_OUT_OF_RELEASE }}
          enforcement: active
      - name: Disable the ruleset
        uses: octokit/request-action@v2.x
        if: steps.app-token.outputs.token && vars.RULESET_ID_WITHIN_RELEASE
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        with:
          route: PUT /repos/{repository}/rulesets/{ruleset_id}
          repository: ${{ github.repository }}
          ruleset_id: ${{ vars.RULESET_ID_WITHIN_RELEASE }}
          enforcement: disabled

      # mergeable: UNKNOWNを回避したい
      - name: 'Pre-fetch PR data'
        run: |
          gh pr view "$PR_NUMBER" --json mergeable
        env:
          PR_NUMBER: ${{ inputs.pr_number }}
      - name: Sleep
        run: sleep 5s

      - name: 'Fetch PR data'
        id: pr-data
        run: |
          echo "data=$(gh pr view "$PR_NUMBER" --json baseRefName,reviewDecision,isDraft,mergeStateStatus,statusCheckRollup,mergeable)" >> $GITHUB_OUTPUT
        env:
          PR_NUMBER: ${{ inputs.pr_number }}
      - name: 'Check Mergeable: compare'
        uses: actions/script@v7
        env:
          pr_data: ${{ steps.pr-data.outputs.data }}
        with:
          script: |
            const pr = JSON.parse(process.env.pr_data);
            if (pr.isDraft) {
              throw new Error('PR is draft');
            }
            if (pr.reviewDecision !== 'APPROVED') {
              throw new Error(`reviewDecision is not APPROVED: ${pr.reviewDecision}`);
            }
            if (pr.mergeable !== 'MERGEABLE') {
              throw new Error(`Not mergeable: ${pr.mergeable}`);
            }
            if (pr.mergeStateStatus !== 'CLEAN') {
              throw new Error(`MergeStateStatus is not CLEAN: ${pr.mergeStateStatus}`);
            }
            if (pr.statusCheckRollup.find(s => s.conclusion !== 'SUCCESS')) {
              throw new Error('Not all status checks are success');
            }

      #region if failed
      - name: Re-enable the ruleset
        uses: octokit/request-action@v2.x
        if: failure() && steps.app-token.outputs.token && vars.RULESET_ID_WITHIN_RELEASE
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        with:
          route: PUT /repos/{repository}/rulesets/{ruleset_id}
          repository: ${{ github.repository }}
          ruleset_id: ${{ vars.RULESET_ID_WITHIN_RELEASE }}
          enforcement: active
      - name: Re-disable the ruleset
        uses: octokit/request-action@v2.x
        if: failure() && steps.app-token.outputs.token && vars.RULESET_ID_OUT_OF_RELEASE
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        with:
          route: PUT /repos/{repository}/rulesets/{ruleset_id}
          repository: ${{ github.repository }}
          ruleset_id: ${{ vars.RULESET_ID_OUT_OF_RELEASE }}
          enforcement: disabled
      #endregion

      # バージョンをpackage.jsonに書き込み
      - name: Write version
        uses: misskey-dev/release-manager-actions/.github/actions/rewrite-package-json@v1
        with:
          version: ${{ steps.v.outputs.target_version }}
          package_jsons: ${{ inputs.package_jsons_to_rewrite }}
          indent: ${{ inputs.indent }}
      # commit, push
      - name: Commit version
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git commit -am "[skip ci] Release: $TARGET_VERSION"
            git push origin "HEAD:release/$TARGET_VERSION"
          fi
        env:
          TARGET_VERSION: ${{ steps.v.outputs.target_version }}

      # CHANGELOG.mdの内容を取得
      - name: Get changelog
        uses: misskey-dev/release-manager-actions/.github/actions/get-changelog@v1
        with:
          version: ${{ steps.v.outputs.target_version }}
        id: changelog

      - name: Create tag
        run: |
          git tag "$TARGET_VERSION"
          git push origin "$TARGET_VERSION"
        env:
          TARGET_VERSION: ${{ steps.v.outputs.target_version }}

      # リリースを作成
      - uses: actions/create-github-app-token@v1
        id: release-app-token
        if: inputs.use_external_app_to_release
        with:
          app-id: ${{ secrets.RELEASE_APP_ID }}
          private-key: ${{ secrets.RELEASE_APP_PRIVATE_KEY }}
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ inputs.use_external_app_to_release && steps.release-app-token.outputs.token || secrets.GITHUB_TOKEN }}
          TARGET_VERSION: ${{ steps.v.outputs.target_version }}
          CHANGELOG: ${{ steps.changelog.outputs.changelog }}
        run: |
          gh release create "$TARGET_VERSION" --title "$TARGET_VERSION" --notes "$CHANGELOG"

      # Merge
      # (Retry because mergeable can unknown after push)
      - name: Merge PR
        uses: prichey/retry@c92c7ba2f5f4d0b3b7b2b04cc5c6672f9c884a3f
        with:
          command: |
            gh pr merge "$PR_NUMBER" --merge
          timeout_seconds: 30
          max_attempts: 3
          retry_wait_seconds: 5
        env:
          PR_NUMBER: ${{ inputs.pr_number }}

      # Declear base branch
      - name: Declear base branch
        id: declear-base-branch
        env:
          pr_data: ${{ steps.pr-data.outputs.data }}
        run: |
          echo "base_branch=$(echo $pr_data | jq -r '.baseRefName')" >> $GITHUB_OUTPUT

      # CHANGELOG.mdにUnreleasedのテンプレートを追加
      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.declear-base-branch.outputs.base_branch }}
      - name: Prepend CHANGELOG template
        env:
          CHANGES_TEMPLATE: ${{ inputs.changes_template }}
        run: sed -i "$(sed -n '/^## /=' CHANGELOG.md | head -1)i $(echo "${CHANGES_TEMPLATE}" | sed -r 's/$/\\n/' | while IFS= read -r line; do echo -n "$line"; done)" CHANGELOG.md
      - name: Update CHANGELOG.md (prepend template)
        run: |
          git commit -am "[skip ci] Update CHANGELOG.md (prepend template)"
          git push origin "HEAD:$BASE_BRANCH"
        env:
          BASE_BRANCH: ${{ steps.declear-base-branch.outputs.base_branch }}
